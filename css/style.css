/* Creating Variables For 'Colors' and 'max-width' */

:root{
  --primary-color: #c72727;
  --secondary-color: #f99500;
  --light-color: #f3f3f3;
  --dark-color: #333;
  --max-width: 1100px;
}

/* Creating Variables for 'sports', 'entertainment', 'technology' as they all are defined under class 'category' so we will define 'variables' under the class 'category' */
.category{
  --sports-color: #f99500;
  --ent-color: #a66bbe;
  --tech-color: #009cff;
}

/* Reset */

*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body{
  font-family: 'Lato', sans-serif;
  line-height: 1.5;
  background: var(--light-color);
}

a{
  color: #333;
  text-decoration: none;
}

ul{
  list-style: none;
}

p{
  margin: .5rem 0;
}

img{
  width: 100%; /* We want imgae to be 100% of its container as by default images will stratch beyond their containers but 'width: 100%;' will stop it */
}

h1, h2, h3, h4, h5, h6{
  font-family: 'Staatliches', cursive;
  margin-bottom: .55rem;
  line-height: 1.3;
}

/* Utility Class */

.container{
  max-width: var(--max-width);
  margin: auto; /* To push the 'container' to the middle */
  padding: 0.2rem;
  overflow: hidden; /* So that 'container' always show the content within */
}

.category{
  display: inline-block; /* As it's a 'button */
  color: #fff;
  font-size: 0.55rem;
  text-transform: uppercase;
  padding: 0.4rem 0.6rem;
  border-radius: 15px;
  margin-bottom: 0.5rem;
}

.category-sports{
  background: var(--sports-color);
}

.category-ent{
  background: var(--ent-color);
}

.category-tech{
  background: var(--tech-color);
}

.btn{
  display: inline-block;
  border: none;
  background: var(--dark-color);
  color: #fff;
  padding: 0.5rem 1.5rem;
}

.btn-light{
  background: var(--light-color);
}

.btn-primary{
  background: var(--primary-color);
}

.btn-secondary{
  background: var(--secondary-color);
}

/* Making little 'translucent' on 'hover' effect */

.btn:hover{
  opacity: 0.9;
}

/* The 'Articles' will get wrapped in the 'white container' or 'white card' */

.card{
  background: #fff;
  padding: 1rem;
}

.bg-dark{
  background: var(--dark-color);
  color: #fff;
}

.bg-primary{
  background: var(--primary-color);
  color: #fff;
}

.bg-secondary{
  background: var(--secondary-color);
  color: #fff;
}

/* To specifically targeting 'headings, link' of different classes so that their 'text-color' does not gets hidden by 'bg-color' */

.bg-dark h1,
.bg-dark h2,
.bg-dark h3,
.bg-dark a,
.bg-primary h1,
.bg-primary h2,
.bg-primary h3,
.bg-primary a,
.bg-secondary h1,
.bg-secondary h2,
.bg-secondary h3,
.bg-secondary a{
  color: #fff;
}

/* 'Padding Classes' up & down */

.py-1{
  padding: 1.5rem 0;
}

.py-2{
  padding: 2rem 0;
}

.py-3{
  padding: 3rem 0;
}

/* 'Padding Classes' all over */

.p-1{
  padding: 1.5rem;
}

.p-2{
  padding: 2rem;
}

.p-3{
  padding: 3rem;
}

.l-heading{
  font-size: 3rem;
}

.list li{
  padding: .5rem 0;
  border-bottom: #fff solid 1px;
}

/* Inner Page Grid Container */

.page-container{
  display: grid;
  grid-template-columns: 5fr 2fr;
  margin: 2rem 0;
  grid-gap: 1.5rem;
}

/* Selecting the 'main-article' */

.page-container > *:first-child{
  /* span this across rows so grid-row we want to start at 1 and then we want to span three.So now it's just going to span down three and whatever we put next is going to go right here and if we want to have more than three then we could increase this span and just have it span as long as we want. */
  grid-row: 1 / span 3;
}

.list li a:hover{
  color: var(--primary-color) !important; /* '!important;' will make this styling sure */
}

/* 'Block Level Buttons' which will go all way across */

.btn-block{
  display: block;
  width: 100%;
  text-align: center;
}

/* Navigation Bar */

#main-nav{
  background: #fff;

  /* We want our 'nav-bar' to be 'sticky' and fixed at top and always show above then rest of the elements */

  position: sticky;
  top: 0;
  z-index: 2;
}

#main-nav .container{
  display: grid; /* It will make 'logos', 'social-icons' and 'ul' the 'grid-items' */
  grid-template-columns: 6fr 3fr 2fr; /* Layout for 'logo', 'social-icons', 'ul' */
  padding: 1rem;
  align-items: center; /* It aligns all the items i.e. 'logo', 'social-icons', 'ul' to the center vertically */
}

#main-nav .logo{
  width: 180px; /* The 'logo-width' will decreased */
}

/* Using 'flex' for alligning the 'ul' of 'nav-bar' */

#main-nav ul{
  justify-self: end; /* It will align the 'ul' to the end of 'nav-bar'.The CSS 'justify-self' property aligns a box within its containing block along the inline/row/main axis.
  This property can be used to override any alignment that has been set at the container level using the 'justify-items' property. */
  display: flex; /* The links will align horizontally */
}

#main-nav ul li a{
  padding: 0.75rem;
  font-weight: bold; /* To make the 'li' bold */
}

#main-nav ul li a.current{
  background: var(--primary-color);
  color: #fff;
}

#main-nav ul li a:hover{
  background: var(--light-color);
  color: var(--dark-color);
}

#main.nav .social{
  justify-self: center; /*  when we're aligning the actual item itself we use 'justify-self'.If we're using the parent we can use like 'justify-content' 'align-items' and so on. */
}

#main-nav .social i{
  color: #777;
  margin-right: .5rem; /* To spread 'icons' a bit */
}

/* Showcase */

#showcase{
  color: #fff;
  background: #333;
  padding: 2rem;
  position: relative; /* 'position relative' and that's important because the before pseudo selector is gonna be 'position absolute'.And remember if you position something 'absolute' it is positioned inside 'inside of the first relative container' so that we want that to be our 'showcase'.We will use 'before pseudo selector' for our 'bg-image and overlay' */
}

#showcase:before{
  /* So now you can see the the image has has an overlay or it's not really an overlay on the image.It's basically the image you can see through it to the dark basically what's happening. */

  content: '';
  background: url('../img/featured.jpg') no-repeat center center/cover;
  position: absolute;

  /* Starting position of image */

  top: 0;
  left: 0;

  /* We want the image to cover whole container so we will use 'width' and 'height' property */

  width: 100%;
  height: 100%;
  opacity: 0.4; /* To make image 'translucent' */
}

#showcase .showcase-container{

  /* We have only '1 item' as 'grid-items' in 'showcase-container' so it will create 2 columns left one will have content and right one will be empty */

  display: grid;
  grid-template-columns: repeat(2, 1fr);
  justify-content: center;  /* To center the contents horizontally */
  align-items: center;  /* To center the contents vertically */

  /* The container having image will cover half of the page */

  height: 50vh;
}

#showcase .showcase-content{ /* 'showcase-content' wraps all the text */
  z-index: 1; /* The text will become clear and will be at top of the image as after ':before pseudo selector' the image was over the text so it wasn't clear */
}

/* To push the button down from 'showcase-content' */

#showcase .showcase-content p{
  margin-bottom: 1rem;
}

/* Home Articles */

#home-articles .articles-container{
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-gap: 1rem;
}

/*  Little more flexible and an 'asterisk' here meaning any element.It doesn't have to be an article but we only want the direct child so we are gonna use the the greater than(>).Actually we want to take the 'first and last article' and span it to the second column */

#home-articles .articles-container > *:first-child,
#home-articles .articles-container > *:last-child{
  display: grid; /* We have turned the 'first-child' '1 fr' */
  grid-template-columns: repeat(2, 1fr); /* The 'img' and the 'text' will be '1 fr' */
  grid-gap: 1rem;
  grid-column: 1 / span 2; /* The 'first-article' will span across '2 columns' */
  align-items: center; /* The 'img' will be in 'center' */
}

/* We want to take the 'last article' and start it to the '2 column' span it to the 'second column' */

#home-articles .articles-container > *:last-child{
  grid-column: 2 / span 2;
}

/* 'Article' Page */

/* The Difference Between 'Grid' An 'Flex'
Using grid and flex like the grid is good for this type of thing.This this the layout of all the boxes and stuff and then flex is good for inner elements aligning stuff like this or menus and you know just small simple stuff that's that's one dimensional. */

/* 'meta' is 'flex-box' now and 'small tag' is going to be one 'flex-item' and 'div' will be another 'flex-item' */

#article .meta{
  display: flex; /* 'meta' is 'flex-box' now */
  justify-content: space-between; /* We want category to over to the right */
  align-items: center;
  background: #eee;
  padding: 0.5rem;
}

/* To push 'category' a bit */

#article .meta .category{
  margin-top: 0.4rem;
}

/* Footer */

#main-footer{
  background: var(--dark-color);
  color: #fff;
}

/* To reduce the size of 'logo-image' */

#main-footer img{
  width: 150px;
}

/* To change the color of 'footer' links */

#main-footer a{
  color: #fff;
}

#main-footer .footer-container{
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-gap: 1.5rem;
}

/* We are targeting the 'last-element' of footer.Using '*' means it can be any parent's element last child */

#main-footer .footer-container > *:last-child{
  background: #444;

  /* To span the last row all way across */

  grid-column: 1 / span 4; /* As we have 4 element's total on above row so it's going to be span 4 and it will start from first element */
  padding: .5rem;
  text-align: center;
}

/* Styling 'Email-Form' */

#main-footer .footer-container input[type='email']{ /* '[type='email']' will select only 'email type input' */
  width: 90%;
  padding: 0.5rem;
  margin-bottom: 0.5rem;
}

/* Styling 'Subscribe' Button */

#main-footer .footer-container input[type='submit']{ /* '[type='submit']' will select only 'submit type input' */
  width: 90%;
}



